






Started logging.
I[20:55:55.176] clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)
I[20:55:55.177] PID: 15284
I[20:55:55.177] Working directory: c:\Users\ECC\Documents\ff
I[20:55:55.177] argv[0]: c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\bin\clangd.exe
I[20:55:55.177] argv[1]: -log=verbose
I[20:55:55.177] argv[2]: --compile-commands-dir=C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503
I[20:55:55.177] argv[3]: -query-driver=c:\Users\ECC\AppData\Local\Arduino15\packages\**
V[20:55:55.188] User config file is C:\Users\ECC\AppData\Local\clangd\config.yaml
I[20:55:55.188] Starting LSP over stdin/stdout
V[20:55:55.189] <<< {"id":0,"jsonrpc":"2.0","method":"initialize","params":{"capabilities":{"textDocument":{"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"dynamicRegistration":true,"isPreferredSupport":true},"colorProvider":{"dynamicRegistration":true},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"documentSymbol":{"hierarchicalDocumentSymbolSupport":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"foldingRange":{"dynamicRegistration":true,"lineFoldingOnly":true,"rangeLimit":5000},"formatting":{"dynamicRegistration":true},"hover":{"contentFormat":["markdown","plaintext"]},"implementation":{"dynamicRegistration":true,"linkSupport":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"synchronization":{"didSave":true,"willSave":true,"willSaveWaitUntil":true},"typeDefinition":{"linkSupport":true}},"window":{"workDoneProgress":true},"workspace":{"applyEdit":true,"configuration":true,"didChangeWatchedFiles":{"dynamicRegistration":true},"executeCommand":{"dynamicRegistration":true},"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"workspaceFolders":true}},"clientInfo":{"name":"vscode","version":"1.50.0"},"initializationOptions":{},"processId":14480,"rootPath":"C:\\Users\\ECC\\AppData\\Local\\Temp\\arduino-language-server688093503\\sketch","rootUri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch","trace":"off"}}

I[20:55:55.189] <-- initialize(0)
I[20:55:55.214] --> reply:initialize(0) 25 ms
V[20:55:55.215] >>> {"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}

V[20:55:55.218] <<< {"jsonrpc":"2.0","method":"initialized","params":{}}

I[20:55:55.218] <-- initialized
V[20:55:55.250] <<< {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"languageId":"cpp","text":"#include <Arduino.h>\n#line 1 \"C:\\\\Users\\\\ECC\\\\Documents\\\\ff\\\\ff.ino\"\n/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include <WiFi.h>\r\n#include <WiFiClient.h>\r\n#include <WiFiAP.h>\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include <Keypad.h>\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include <Servo.h>\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click <a href=\\\"/H\\\">here</a> to turn ON the LED.<br>\");\r\n            client.print(\"Click <a href=\\\"/L\\\">here</a> to turn OFF the LED.<br>\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password => unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password => Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\n","uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp","version":1}}}

I[20:55:55.250] <-- textDocument/didOpen
V[20:55:55.264] <<< {"id":1,"jsonrpc":"2.0","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"}}}

I[20:55:55.264] <-- textDocument/documentSymbol(1)
V[20:55:55.283] <<< {"id":2,"jsonrpc":"2.0","method":"textDocument/codeAction","params":{"context":{"diagnostics":[]},"range":{"end":{"character":0,"line":2},"start":{"character":0,"line":2}},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"}}}

I[20:55:55.283] <-- textDocument/codeAction(2)
I[20:55:55.318] Loaded compilation database from C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\compile_commands.json
V[20:55:55.318] Broadcasting compilation database from C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503
I[20:55:55.318] --> window/workDoneProgress/create(0)
V[20:55:55.318] >>> {"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}

I[20:55:55.318] Enqueueing 0 commands for indexing
I[20:55:55.318] ASTWorker building file C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp version 1 with command clangd fallback
[C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch]
c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\bin\clang C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp -fsyntax-only -resource-dir=c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0
V[20:55:55.322] <<< {"id":0,"jsonrpc":"2.0","result":null}

I[20:55:55.322] <-- reply(0)
I[20:55:55.322] --> $/progress
V[20:55:55.322] >>> {"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}

I[20:55:55.322] --> $/progress
V[20:55:55.322] >>> {"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}

V[20:55:55.535] Driver produced command: cc1 -cc1 -triple x86_64-pc-windows-msvc19.11.0 -fsyntax-only -disable-free -disable-llvm-verifier -discard-value-names -main-file-name ff.ino.cpp -mrelocation-model pic -pic-level 2 -mframe-pointer=none -fmath-errno -fno-rounding-math -mconstructor-aliases -munwind-tables -target-cpu x86-64 -tune-cpu generic -resource-dir c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0 -internal-isystem c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0\include -internal-isystem C:/Program Files/Microsoft Visual Studio 10.0/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 9.0/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 9.0/VC/PlatformSDK/Include -internal-isystem C:/Program Files/Microsoft Visual Studio 8/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 8/VC/PlatformSDK/Include -fdeprecated-macro -fdebug-compilation-dir C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch -ferror-limit 19 -fno-use-cxa-atexit -fms-extensions -fms-compatibility -fms-compatibility-version=19.11 -std=c++14 -fdelayed-template-parsing -fcxx-exceptions -fexceptions -faddrsig -x c++ C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp
V[20:55:55.535] Building first preamble for C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp version 1
V[20:55:55.668] indexed preamble AST for C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp version 1:
  symbol slab: 0 symbols, 128 bytes
  ref slab: 0 symbols, 0 refs, 136 bytes
  relations slab: 0 relations, 24 bytes
V[20:55:55.684] Built preamble of size 222428 for file C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp version 1
V[20:55:55.802] Trying to fix unresolved name "WiFiServer" in scopes: []
V[20:55:55.946] indexed file AST for C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp version 1:
  symbol slab: 20 symbols, 8864 bytes
  ref slab: 20 symbols, 43 refs, 4904 bytes
  relations slab: 0 relations, 24 bytes
V[20:55:55.946] Build dynamic index for main-file symbols with estimated memory usage of 22344 bytes
I[20:55:55.947] --> textDocument/publishDiagnostics
V[20:55:55.947] >>> {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"'Arduino.h' file not found","range":{"end":{"character":20,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'WiFiServer'","range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"'Keypad.h' file not found","range":{"end":{"character":19,"line":27},"start":{"character":9,"line":27}},"severity":1,"source":"clang"}],"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp","version":1}}

V[20:55:55.969] ASTWorker running DocumentSymbols on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp
I[20:55:55.971] --> reply:textDocument/documentSymbol(1) 706 ms
V[20:55:55.971] >>> {"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}

V[20:55:55.972] ASTWorker running EnumerateTweaks on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp
I[20:55:56.061] --> reply:textDocument/codeAction(2) 778 ms
V[20:55:56.061] >>> {"id":2,"jsonrpc":"2.0","result":[]}

V[20:55:56.165] <<< {"id":3,"jsonrpc":"2.0","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"}}}

I[20:55:56.165] <-- textDocument/documentSymbol(3)
V[20:55:56.165] ASTWorker running DocumentSymbols on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp
I[20:55:56.166] --> reply:textDocument/documentSymbol(3) 1 ms
V[20:55:56.166] >>> {"id":3,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}

V[20:55:56.304] <<< {"id":4,"jsonrpc":"2.0","method":"textDocument/codeAction","params":{"context":{"diagnostics":[]},"range":{"end":{"character":0,"line":2},"start":{"character":0,"line":2}},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"}}}

I[20:55:56.304] <-- textDocument/codeAction(4)
V[20:55:56.304] ASTWorker running EnumerateTweaks on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp
I[20:55:56.304] --> reply:textDocument/codeAction(4) 0 ms
V[20:55:56.304] >>> {"id":4,"jsonrpc":"2.0","result":[]}

V[20:56:53.718] <<< {"id":5,"jsonrpc":"2.0","method":"textDocument/hover","params":{"position":{"character":3,"line":19},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"}}}

I[20:56:53.718] <-- textDocument/hover(5)
V[20:56:53.721] ASTWorker running Hover on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp
I[20:56:53.771] --> reply:textDocument/hover(5) 52 ms
V[20:56:53.771] >>> {"id":5,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `ssid`  \n\n---\nType: `const char *`  \nValue = `&\"Door Lock\"[0]`  \nSet these to your desired credentials.  \n\n---\n```cpp\nconst char *ssid = \"Door Lock\"\n```"},"range":{"end":{"character":5,"line":19},"start":{"character":0,"line":19}}}}

V[20:57:08.190] <<< {"id":6,"jsonrpc":"2.0","method":"textDocument/hover","params":{"position":{"character":29,"line":12},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"}}}

I[20:57:08.190] <-- textDocument/hover(6)
V[20:57:08.195] ASTWorker running Hover on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server688093503\sketch\ff.ino.cpp
I[20:57:08.197] --> reply:textDocument/hover(6) 6 ms
V[20:57:08.197] >>> {"id":6,"jsonrpc":"2.0","result":null}

V[20:57:08.254] <<< {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}

I[20:57:08.254] <-- $/cancelRequest
V[20:57:10.002] <<< {"id":7,"jsonrpc":"2.0","method":"shutdown","params":null}

I[20:57:10.003] <-- shutdown(7)
I[20:57:10.003] --> reply:shutdown(7) 0 ms
V[20:57:10.003] >>> {"id":7,"jsonrpc":"2.0","result":null}

V[20:57:10.007] <<< {"jsonrpc":"2.0","method":"exit","params":null}

I[20:57:10.007] <-- exit
I[20:57:10.007] LSP finished, exiting with status 0







Started logging.
I[20:57:52.472] clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)
I[20:57:52.473] PID: 11240
I[20:57:52.473] Working directory: c:\Users\ECC\Documents\ff
I[20:57:52.473] argv[0]: c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\bin\clangd.exe
I[20:57:52.473] argv[1]: -log=verbose
I[20:57:52.473] argv[2]: --compile-commands-dir=C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403
I[20:57:52.473] argv[3]: -query-driver=c:\Users\ECC\AppData\Local\Arduino15\packages\**
V[20:57:52.481] User config file is C:\Users\ECC\AppData\Local\clangd\config.yaml
I[20:57:52.481] Starting LSP over stdin/stdout
V[20:57:52.482] <<< {"id":0,"jsonrpc":"2.0","method":"initialize","params":{"capabilities":{"textDocument":{"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"dynamicRegistration":true,"isPreferredSupport":true},"colorProvider":{"dynamicRegistration":true},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"documentSymbol":{"hierarchicalDocumentSymbolSupport":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"foldingRange":{"dynamicRegistration":true,"lineFoldingOnly":true,"rangeLimit":5000},"formatting":{"dynamicRegistration":true},"hover":{"contentFormat":["markdown","plaintext"]},"implementation":{"dynamicRegistration":true,"linkSupport":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"synchronization":{"didSave":true,"willSave":true,"willSaveWaitUntil":true},"typeDefinition":{"linkSupport":true}},"window":{"workDoneProgress":true},"workspace":{"applyEdit":true,"configuration":true,"didChangeWatchedFiles":{"dynamicRegistration":true},"executeCommand":{"dynamicRegistration":true},"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"workspaceFolders":true}},"clientInfo":{"name":"vscode","version":"1.50.0"},"initializationOptions":{},"processId":14760,"rootPath":"C:\\Users\\ECC\\AppData\\Local\\Temp\\arduino-language-server554229403\\sketch","rootUri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch","trace":"off"}}

I[20:57:52.482] <-- initialize(0)
I[20:57:52.494] --> reply:initialize(0) 12 ms
V[20:57:52.494] >>> {"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}

V[20:57:52.495] <<< {"jsonrpc":"2.0","method":"initialized","params":{}}

I[20:57:52.495] <-- initialized
V[20:57:52.524] <<< {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"languageId":"cpp","text":"#include <Arduino.h>\n#line 1 \"C:\\\\Users\\\\ECC\\\\Documents\\\\ff\\\\ff.ino\"\n/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include <WiFi.h>\r\n#include <WiFiClient.h>\r\n#include <WiFiAP.h>\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include <Keypad.h>\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include <Servo.h>\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click <a href=\\\"/H\\\">here</a> to turn ON the LED.<br>\");\r\n            client.print(\"Click <a href=\\\"/L\\\">here</a> to turn OFF the LED.<br>\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password => unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password => Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\n","uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp","version":1}}}

I[20:57:52.545] <-- textDocument/didOpen
V[20:57:52.545] <<< {"id":1,"jsonrpc":"2.0","method":"textDocument/codeAction","params":{"context":{"diagnostics":[]},"range":{"end":{"character":0,"line":2},"start":{"character":0,"line":2}},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:57:52.545] <-- textDocument/codeAction(1)
V[20:57:52.545] <<< {"id":2,"jsonrpc":"2.0","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:57:52.545] <-- textDocument/documentSymbol(2)
I[20:57:52.552] Loaded compilation database from C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\compile_commands.json
V[20:57:52.552] Broadcasting compilation database from C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403
I[20:57:52.553] --> window/workDoneProgress/create(0)
V[20:57:52.553] >>> {"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}

I[20:57:52.553] Enqueueing 0 commands for indexing
I[20:57:52.553] ASTWorker building file C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp version 1 with command clangd fallback
[C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch]
c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\bin\clang C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp -fsyntax-only -resource-dir=c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0
V[20:57:52.556] <<< {"id":0,"jsonrpc":"2.0","result":null}

I[20:57:52.557] <-- reply(0)
I[20:57:52.557] --> $/progress
V[20:57:52.557] >>> {"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}

I[20:57:52.557] --> $/progress
V[20:57:52.557] >>> {"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}

V[20:57:52.595] Driver produced command: cc1 -cc1 -triple x86_64-pc-windows-msvc19.11.0 -fsyntax-only -disable-free -disable-llvm-verifier -discard-value-names -main-file-name ff.ino.cpp -mrelocation-model pic -pic-level 2 -mframe-pointer=none -fmath-errno -fno-rounding-math -mconstructor-aliases -munwind-tables -target-cpu x86-64 -tune-cpu generic -resource-dir c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0 -internal-isystem c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0\include -internal-isystem C:/Program Files/Microsoft Visual Studio 10.0/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 9.0/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 9.0/VC/PlatformSDK/Include -internal-isystem C:/Program Files/Microsoft Visual Studio 8/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 8/VC/PlatformSDK/Include -fdeprecated-macro -fdebug-compilation-dir C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch -ferror-limit 19 -fno-use-cxa-atexit -fms-extensions -fms-compatibility -fms-compatibility-version=19.11 -std=c++14 -fdelayed-template-parsing -fcxx-exceptions -fexceptions -faddrsig -x c++ C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
V[20:57:52.596] Building first preamble for C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp version 1
V[20:57:52.617] indexed preamble AST for C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp version 1:
  symbol slab: 0 symbols, 128 bytes
  ref slab: 0 symbols, 0 refs, 136 bytes
  relations slab: 0 relations, 24 bytes
V[20:57:52.627] Built preamble of size 222428 for file C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp version 1
V[20:57:52.683] Trying to fix unresolved name "WiFiServer" in scopes: []
V[20:57:52.689] indexed file AST for C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp version 1:
  symbol slab: 20 symbols, 8864 bytes
  ref slab: 20 symbols, 43 refs, 4904 bytes
  relations slab: 0 relations, 24 bytes
V[20:57:52.689] Build dynamic index for main-file symbols with estimated memory usage of 22344 bytes
I[20:57:52.690] --> textDocument/publishDiagnostics
V[20:57:52.690] >>> {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"'Arduino.h' file not found","range":{"end":{"character":20,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'WiFiServer'","range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"'Keypad.h' file not found","range":{"end":{"character":19,"line":27},"start":{"character":9,"line":27}},"severity":1,"source":"clang"}],"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp","version":1}}

V[20:57:52.690] ASTWorker running EnumerateTweaks on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:57:52.691] --> reply:textDocument/codeAction(1) 145 ms
V[20:57:52.691] >>> {"id":1,"jsonrpc":"2.0","result":[]}

V[20:57:52.691] ASTWorker running DocumentSymbols on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:57:52.699] --> reply:textDocument/documentSymbol(2) 153 ms
V[20:57:52.699] >>> {"id":2,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}

V[20:57:52.748] <<< {"id":3,"jsonrpc":"2.0","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:57:52.748] <-- textDocument/documentSymbol(3)
V[20:57:52.748] ASTWorker running DocumentSymbols on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:57:52.750] --> reply:textDocument/documentSymbol(3) 1 ms
V[20:57:52.750] >>> {"id":3,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}

V[20:57:53.005] <<< {"id":4,"jsonrpc":"2.0","method":"textDocument/codeAction","params":{"context":{"diagnostics":[]},"range":{"end":{"character":0,"line":2},"start":{"character":0,"line":2}},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:57:53.005] <-- textDocument/codeAction(4)
V[20:57:53.006] ASTWorker running EnumerateTweaks on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:57:53.006] --> reply:textDocument/codeAction(4) 0 ms
V[20:57:53.006] >>> {"id":4,"jsonrpc":"2.0","result":[]}

V[20:57:55.326] <<< {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"#include <Arduino.h>\n#line 1 \"C:\\\\Users\\\\ECC\\\\Documents\\\\ff\\\\ff.ino\"\n/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include <WiFi.h>\r\n#include <WiFiClient.h>\r\n#include <WiFiAP.h>\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include <Keypad.h>\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include <Servo.h>\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click <a href=\\\"/H\\\">here</a> to turn ON the LED.<br>\");\r\n            client.print(\"Click <a href=\\\"/L\\\">here</a> to turn OFF the LED.<br>\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password => unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password => Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\n"}],"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp","version":2}}}

I[20:57:55.330] <-- textDocument/didChange
I[20:57:55.403] ASTWorker building file C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp version 2 with command clangd fallback
[C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch]
c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\bin\clang C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp -fsyntax-only -resource-dir=c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0
V[20:57:55.408] Driver produced command: cc1 -cc1 -triple x86_64-pc-windows-msvc19.11.0 -fsyntax-only -disable-free -disable-llvm-verifier -discard-value-names -main-file-name ff.ino.cpp -mrelocation-model pic -pic-level 2 -mframe-pointer=none -fmath-errno -fno-rounding-math -mconstructor-aliases -munwind-tables -target-cpu x86-64 -tune-cpu generic -resource-dir c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0 -internal-isystem c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0\include -internal-isystem C:/Program Files/Microsoft Visual Studio 10.0/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 9.0/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 9.0/VC/PlatformSDK/Include -internal-isystem C:/Program Files/Microsoft Visual Studio 8/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 8/VC/PlatformSDK/Include -fdeprecated-macro -fdebug-compilation-dir C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch -ferror-limit 19 -fno-use-cxa-atexit -fms-extensions -fms-compatibility -fms-compatibility-version=19.11 -std=c++14 -fdelayed-template-parsing -fcxx-exceptions -fexceptions -faddrsig -x c++ C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
V[20:57:55.409] Reusing preamble version 1 for version 2 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
V[20:58:18.922] <<< {"id":5,"jsonrpc":"2.0","method":"textDocument/hover","params":{"position":{"character":24,"line":18},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:58:18.922] <-- textDocument/hover(5)
V[20:58:18.924] ASTWorker running Hover on version 2 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:58:18.926] --> reply:textDocument/hover(5) 3 ms
V[20:58:18.926] >>> {"id":5,"jsonrpc":"2.0","result":null}

V[20:58:18.941] <<< {"id":6,"jsonrpc":"2.0","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:58:18.942] <-- textDocument/documentSymbol(6)
V[20:58:18.942] ASTWorker running DocumentSymbols on version 2 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:58:18.943] --> reply:textDocument/documentSymbol(6) 1 ms
V[20:58:18.944] >>> {"id":6,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}

V[20:58:39.245] <<< {"id":7,"jsonrpc":"2.0","method":"textDocument/hover","params":{"position":{"character":3,"line":20},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:58:39.245] <-- textDocument/hover(7)
V[20:58:39.247] ASTWorker running Hover on version 2 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:58:39.286] --> reply:textDocument/hover(7) 41 ms
V[20:58:39.286] >>> {"id":7,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `password`  \n\n---\nType: `const char *`  \nValue = `&\"12345678\"[0]`  \n\n---\n```cpp\nconst char *password = \"12345678\"\n```"},"range":{"end":{"character":5,"line":20},"start":{"character":0,"line":20}}}}

V[20:58:39.295] <<< {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}

I[20:58:39.295] <-- $/cancelRequest
V[20:58:39.639] <<< {"id":8,"jsonrpc":"2.0","method":"textDocument/hover","params":{"position":{"character":4,"line":21},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:58:39.639] <-- textDocument/hover(8)
V[20:58:39.639] ASTWorker running Hover on version 2 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:58:39.642] --> reply:textDocument/hover(8) 3 ms
V[20:58:39.642] >>> {"id":8,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `server`  \n\n---\nType: `int`  \n\n---\n```cpp\npublic: int server\n```"},"range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}}}}

V[20:58:39.926] <<< {"id":9,"jsonrpc":"2.0","method":"textDocument/codeAction","params":{"context":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'WiFiServer'","range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"}]},"range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:58:39.926] <-- textDocument/codeAction(9)
V[20:58:39.926] ASTWorker running EnumerateTweaks on version 2 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:58:39.926] --> reply:textDocument/codeAction(9) 0 ms
V[20:58:39.926] >>> {"id":9,"jsonrpc":"2.0","result":[]}

V[20:58:50.202] <<< {"id":10,"jsonrpc":"2.0","method":"textDocument/hover","params":{"position":{"character":0,"line":27},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[20:58:50.202] <-- textDocument/hover(10)
V[20:58:50.205] ASTWorker running Hover on version 2 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[20:58:50.206] --> reply:textDocument/hover(10) 4 ms
V[20:58:50.206] >>> {"id":10,"jsonrpc":"2.0","result":null}

V[22:29:06.025] <<< {"id":11,"jsonrpc":"2.0","method":"textDocument/hover","params":{"position":{"character":20,"line":21},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}}}

I[22:29:06.093] <-- textDocument/hover(11)
V[22:29:06.267] ASTWorker running Hover on version 2 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server554229403\sketch\ff.ino.cpp
I[22:29:06.537] --> reply:textDocument/hover(11) 450 ms
V[22:29:06.538] >>> {"id":11,"jsonrpc":"2.0","result":null}

V[22:29:06.568] <<< {"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":8}}

I[22:29:06.568] <-- $/cancelRequest
V[22:29:49.557] <<< {"id":12,"jsonrpc":"2.0","method":"shutdown","params":null}

I[22:29:49.557] <-- shutdown(12)
I[22:29:49.557] --> reply:shutdown(12) 0 ms
V[22:29:49.557] >>> {"id":12,"jsonrpc":"2.0","result":null}

V[22:29:49.672] <<< {"jsonrpc":"2.0","method":"exit","params":null}

I[22:29:49.672] <-- exit
I[22:29:49.672] LSP finished, exiting with status 0







Started logging.
I[22:29:54.721] clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)
I[22:29:54.722] PID: 4320
I[22:29:54.722] Working directory: c:\Users\ECC\Documents\ff
I[22:29:54.722] argv[0]: c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\bin\clangd.exe
I[22:29:54.722] argv[1]: -log=verbose
I[22:29:54.722] argv[2]: --compile-commands-dir=C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263
I[22:29:54.722] argv[3]: -query-driver=c:\Users\ECC\AppData\Local\Arduino15\packages\**
V[22:29:54.730] User config file is C:\Users\ECC\AppData\Local\clangd\config.yaml
I[22:29:54.731] Starting LSP over stdin/stdout
V[22:29:54.731] <<< {"id":0,"jsonrpc":"2.0","method":"initialize","params":{"capabilities":{"textDocument":{"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"dynamicRegistration":true,"isPreferredSupport":true},"colorProvider":{"dynamicRegistration":true},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"documentSymbol":{"hierarchicalDocumentSymbolSupport":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"foldingRange":{"dynamicRegistration":true,"lineFoldingOnly":true,"rangeLimit":5000},"formatting":{"dynamicRegistration":true},"hover":{"contentFormat":["markdown","plaintext"]},"implementation":{"dynamicRegistration":true,"linkSupport":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"synchronization":{"didSave":true,"willSave":true,"willSaveWaitUntil":true},"typeDefinition":{"linkSupport":true}},"window":{"workDoneProgress":true},"workspace":{"applyEdit":true,"configuration":true,"didChangeWatchedFiles":{"dynamicRegistration":true},"executeCommand":{"dynamicRegistration":true},"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"workspaceFolders":true}},"clientInfo":{"name":"vscode","version":"1.50.0"},"initializationOptions":{},"processId":14760,"rootPath":"C:\\Users\\ECC\\AppData\\Local\\Temp\\arduino-language-server967556263\\sketch","rootUri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch","trace":"off"}}

I[22:29:54.731] <-- initialize(0)
I[22:29:54.774] --> reply:initialize(0) 43 ms
V[22:29:54.775] >>> {"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}

V[22:29:54.821] <<< {"jsonrpc":"2.0","method":"initialized","params":{}}

I[22:29:54.822] <-- initialized
V[22:29:54.843] <<< {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"languageId":"cpp","text":"#include <Arduino.h>\n#line 1 \"C:\\\\Users\\\\ECC\\\\Documents\\\\ff\\\\ff.ino\"\n/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include <WiFi.h>\r\n#include <WiFiClient.h>\r\n#include <WiFiAP.h>\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include <Keypad.h>\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include <Servo.h>\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click <a href=\\\"/H\\\">here</a> to turn ON the LED.<br>\");\r\n            client.print(\"Click <a href=\\\"/L\\\">here</a> to turn OFF the LED.<br>\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password => unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password => Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\n","uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp","version":1}}}

I[22:29:54.847] <-- textDocument/didOpen
V[22:29:54.853] <<< {"id":1,"jsonrpc":"2.0","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp"}}}

I[22:29:54.853] <-- textDocument/documentSymbol(1)
V[22:29:54.865] <<< {"id":2,"jsonrpc":"2.0","method":"textDocument/codeAction","params":{"context":{"diagnostics":[]},"range":{"end":{"character":0,"line":2},"start":{"character":0,"line":2}},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp"}}}

I[22:29:54.865] <-- textDocument/codeAction(2)
I[22:29:54.872] Loaded compilation database from C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\compile_commands.json
V[22:29:54.872] Broadcasting compilation database from C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263
I[22:29:54.872] ASTWorker building file C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp version 1 with command clangd fallback
[C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch]
c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\bin\clang C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp -fsyntax-only -resource-dir=c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0
I[22:29:54.872] --> window/workDoneProgress/create(0)
V[22:29:54.872] >>> {"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}

I[22:29:54.872] Enqueueing 0 commands for indexing
V[22:29:54.875] <<< {"id":0,"jsonrpc":"2.0","result":null}

I[22:29:54.875] <-- reply(0)
I[22:29:54.875] --> $/progress
V[22:29:54.875] >>> {"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}

I[22:29:54.875] --> $/progress
V[22:29:54.875] >>> {"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}

V[22:29:55.035] Driver produced command: cc1 -cc1 -triple x86_64-pc-windows-msvc19.11.0 -fsyntax-only -disable-free -disable-llvm-verifier -discard-value-names -main-file-name ff.ino.cpp -mrelocation-model pic -pic-level 2 -mframe-pointer=none -fmath-errno -fno-rounding-math -mconstructor-aliases -munwind-tables -target-cpu x86-64 -tune-cpu generic -resource-dir c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0 -internal-isystem c:\Users\ECC\AppData\Local\Programs\Arduino IDE\resources\app\node_modules\arduino-ide-extension\build\lib\clang\12.0.0\include -internal-isystem C:/Program Files/Microsoft Visual Studio 10.0/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 9.0/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 9.0/VC/PlatformSDK/Include -internal-isystem C:/Program Files/Microsoft Visual Studio 8/VC/include -internal-isystem C:/Program Files/Microsoft Visual Studio 8/VC/PlatformSDK/Include -fdeprecated-macro -fdebug-compilation-dir C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch -ferror-limit 19 -fno-use-cxa-atexit -fms-extensions -fms-compatibility -fms-compatibility-version=19.11 -std=c++14 -fdelayed-template-parsing -fcxx-exceptions -fexceptions -faddrsig -x c++ C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp
V[22:29:55.035] Building first preamble for C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp version 1
V[22:29:55.057] indexed preamble AST for C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp version 1:
  symbol slab: 0 symbols, 128 bytes
  ref slab: 0 symbols, 0 refs, 136 bytes
  relations slab: 0 relations, 24 bytes
V[22:29:55.068] Built preamble of size 222428 for file C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp version 1
V[22:29:55.166] Trying to fix unresolved name "WiFiServer" in scopes: []
V[22:29:55.191] indexed file AST for C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp version 1:
  symbol slab: 20 symbols, 8864 bytes
  ref slab: 20 symbols, 43 refs, 4904 bytes
  relations slab: 0 relations, 24 bytes
V[22:29:55.191] Build dynamic index for main-file symbols with estimated memory usage of 22344 bytes
I[22:29:55.191] --> textDocument/publishDiagnostics
V[22:29:55.191] >>> {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"'Arduino.h' file not found","range":{"end":{"character":20,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'WiFiServer'","range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"'Keypad.h' file not found","range":{"end":{"character":19,"line":27},"start":{"character":9,"line":27}},"severity":1,"source":"clang"}],"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp","version":1}}

V[22:29:55.192] ASTWorker running DocumentSymbols on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp
I[22:29:55.193] --> reply:textDocument/documentSymbol(1) 340 ms
V[22:29:55.193] >>> {"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}

V[22:29:55.193] ASTWorker running EnumerateTweaks on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp
I[22:29:55.194] --> reply:textDocument/codeAction(2) 328 ms
V[22:29:55.194] >>> {"id":2,"jsonrpc":"2.0","result":[]}

V[22:29:55.672] <<< {"id":3,"jsonrpc":"2.0","method":"textDocument/codeAction","params":{"context":{"diagnostics":[]},"range":{"end":{"character":0,"line":2},"start":{"character":0,"line":2}},"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp"}}}

I[22:29:55.672] <-- textDocument/codeAction(3)
V[22:29:55.672] ASTWorker running EnumerateTweaks on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp
I[22:29:55.672] --> reply:textDocument/codeAction(3) 0 ms
V[22:29:55.672] >>> {"id":3,"jsonrpc":"2.0","result":[]}

V[22:29:55.676] <<< {"id":4,"jsonrpc":"2.0","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp"}}}

I[22:29:55.676] <-- textDocument/documentSymbol(4)
V[22:29:55.676] ASTWorker running DocumentSymbols on version 1 of C:\Users\ECC\AppData\Local\Temp\arduino-language-server967556263\sketch\ff.ino.cpp
I[22:29:55.678] --> reply:textDocument/documentSymbol(4) 1 ms
V[22:29:55.678] >>> {"id":4,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}

