






Started logging.

<<<
Content-Length: 2992

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":14480,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\ECC\\Documents\\ff","rootUri":"file:///c%3A/Users/ECC/Documents/ff","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ECC/Documents/ff","name":"ff"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7882

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino","languageId":"cpp","version":1,"text":"/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include <WiFi.h>\r\n#include <WiFiClient.h>\r\n#include <WiFiAP.h>\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include <Keypad.h>\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include <Servo.h>\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click <a href=\\\"/H\\\">here</a> to turn ON the LED.<br>\");\r\n            client.print(\"Click <a href=\\\"/L\\\">here</a> to turn OFF the LED.<br>\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password => unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password => Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n"}}}Content-Length: 241

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 490

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino","diagnostics":[{"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":10}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'WiFiServer'"},{"range":{"start":{"line":25,"character":9},"end":{"line":25,"character":19}},"severity":1,"code":"pp_file_not_found","source":"clang","message":"'Keypad.h' file not found"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 241

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 170

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"position":{"line":17,"character":3}}}
>>>
Content-Length: 337

{"id":3,"result":{"contents":{"kind":"markdown","value":"### variable `ssid`  \n\n---\nType: `const char *`  \nValue = `\u0026\"Door Lock\"[0]`  \nSet these to your desired credentials.  \n\n---\n```cpp\nconst char *ssid = \"Door Lock\"\n```"},"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 171

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"position":{"line":10,"character":29}}}
>>>
Content-Length: 38

{"id":4,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}Content-Length: 58

{"jsonrpc":"2.0","id":5,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"id":5,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 2992

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":14760,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\ECC\\Documents\\ff","rootUri":"file:///c%3A/Users/ECC/Documents/ff","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ECC/Documents/ff","name":"ff"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7882

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino","languageId":"cpp","version":1,"text":"/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include <WiFi.h>\r\n#include <WiFiClient.h>\r\n#include <WiFiAP.h>\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include <Keypad.h>\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include <Servo.h>\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click <a href=\\\"/H\\\">here</a> to turn ON the LED.<br>\");\r\n            client.print(\"Click <a href=\\\"/L\\\">here</a> to turn OFF the LED.<br>\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password => unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password => Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n"}}}Content-Length: 241

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 490

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino","diagnostics":[{"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":10}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'WiFiServer'"},{"range":{"start":{"line":25,"character":9},"end":{"line":25,"character":19}},"severity":1,"code":"pp_file_not_found","source":"clang","message":"'Keypad.h' file not found"}]},"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 241

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}Content-Length: 116

{"method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"},"id":1,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
>>>
Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"title":"Building sketch","kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 138

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling.","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 139

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling..","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 140

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"compiling...","kind":"report"}},"jsonrpc":"2.0"}Content-Length: 129

{"method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"message":"done","kind":"end"}},"jsonrpc":"2.0"}
<<<
Content-Length: 171

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"position":{"line":16,"character":24}}}
>>>
Content-Length: 38

{"id":3,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 170

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"position":{"line":18,"character":3}}}
>>>
Content-Length: 301

{"id":4,"result":{"contents":{"kind":"markdown","value":"### variable `password`  \n\n---\nType: `const char *`  \nValue = `\u0026\"12345678\"[0]`  \n\n---\n```cpp\nconst char *password = \"12345678\"\n```"},"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":5}}},"jsonrpc":"2.0"}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":4}}Content-Length: 170

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"position":{"line":19,"character":4}}}
>>>
Content-Length: 239

{"id":5,"result":{"contents":{"kind":"markdown","value":"### variable `server`  \n\n---\nType: `int`  \n\n---\n```cpp\npublic: int server\n```"},"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":10}}},"jsonrpc":"2.0"}
<<<
Content-Length: 441

{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":10}},"message":"Unknown type name 'WiFiServer'","severity":1,"code":"unknown_typename","source":"clang"}],"only":["quickfix"]}}}
>>>
Content-Length: 36

{"id":6,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 170

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"position":{"line":25,"character":0}}}
>>>
Content-Length: 38

{"id":7,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 171

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"position":{"line":19,"character":20}}}
>>>
Content-Length: 38

{"id":8,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":8}}Content-Length: 58

{"jsonrpc":"2.0","id":9,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"id":9,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 2992

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":14760,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\ECC\\Documents\\ff","rootUri":"file:///c%3A/Users/ECC/Documents/ff","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/ECC/Documents/ff","name":"ff"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7882

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino","languageId":"cpp","version":1,"text":"/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include <WiFi.h>\r\n#include <WiFiClient.h>\r\n#include <WiFiAP.h>\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include <Keypad.h>\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include <Servo.h>\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click <a href=\\\"/H\\\">here</a> to turn ON the LED.<br>\");\r\n            client.print(\"Click <a href=\\\"/L\\\">here</a> to turn OFF the LED.<br>\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password => unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password => Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n"}}}Content-Length: 241

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 111

{"method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"},"id":0,"jsonrpc":"2.0"}Content-Length: 36

{"id":1,"result":[],"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
>>>
Content-Length: 143

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"title":"indexing","percentage":0,"kind":"begin"}},"jsonrpc":"2.0"}Content-Length: 107

{"method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}},"jsonrpc":"2.0"}Content-Length: 490

{"method":"textDocument/publishDiagnostics","params":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino","diagnostics":[{"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":10}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'WiFiServer'"},{"range":{"start":{"line":25,"character":9},"end":{"line":25,"character":19}},"severity":1,"code":"pp_file_not_found","source":"clang","message":"'Keypad.h' file not found"}]},"jsonrpc":"2.0"}
<<<
Content-Length: 241

{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/ECC/Documents/ff/ff.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"id":2,"result":[],"jsonrpc":"2.0"}