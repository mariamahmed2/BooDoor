






Started logging.

>>>
Content-Length: 2159

{"method":"initialize","params":{"processId":14480,"rootPath":"C:\\Users\\ECC\\AppData\\Local\\Temp\\arduino-language-server688093503\\sketch","rootUri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 8165

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\ECC\\\\Documents\\\\ff\\\\ff.ino\"\n/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include \u003cWiFi.h\u003e\r\n#include \u003cWiFiClient.h\u003e\r\n#include \u003cWiFiAP.h\u003e\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include \u003cKeypad.h\u003e\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include \u003cServo.h\u003e\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click \u003ca href=\\\"/H\\\"\u003ehere\u003c/a\u003e to turn ON the LED.\u003cbr\u003e\");\r\n            client.print(\"Click \u003ca href=\\\"/L\\\"\u003ehere\u003c/a\u003e to turn OFF the LED.\u003cbr\u003e\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos \u003c= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos \u003e= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos \u003e= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password =\u003e unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos \u003c= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password =\u003e Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"}},"id":1,"jsonrpc":"2.0"}Content-Length: 289

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 723

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"'Arduino.h' file not found","range":{"end":{"character":20,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'WiFiServer'","range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"'Keypad.h' file not found","range":{"end":{"character":19,"line":27},"start":{"character":9,"line":27}},"severity":1,"source":"clang"}],"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp","version":1}}Content-Length: 2725

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 190

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 2725

{"id":3,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}
>>>
Content-Length: 289

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":4,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 218

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"},"position":{"line":19,"character":3}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 332

{"id":5,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `ssid`  \n\n---\nType: `const char *`  \nValue = `&\"Door Lock\"[0]`  \nSet these to your desired credentials.  \n\n---\n```cpp\nconst char *ssid = \"Door Lock\"\n```"},"range":{"end":{"character":5,"line":19},"start":{"character":0,"line":19}}}}
>>>
Content-Length: 219

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server688093503/sketch/ff.ino.cpp"},"position":{"line":12,"character":29}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":6,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 62

{"method":"$/cancelRequest","params":{"id":4},"jsonrpc":"2.0"}Content-Length: 58

{"method":"shutdown","params":null,"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":7,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 47

{"method":"exit","params":null,"jsonrpc":"2.0"}<<< Read Error: EOF







Started logging.

>>>
Content-Length: 2159

{"method":"initialize","params":{"processId":14760,"rootPath":"C:\\Users\\ECC\\AppData\\Local\\Temp\\arduino-language-server554229403\\sketch","rootUri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 8165

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\ECC\\\\Documents\\\\ff\\\\ff.ino\"\n/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include \u003cWiFi.h\u003e\r\n#include \u003cWiFiClient.h\u003e\r\n#include \u003cWiFiAP.h\u003e\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include \u003cKeypad.h\u003e\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include \u003cServo.h\u003e\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click \u003ca href=\\\"/H\\\"\u003ehere\u003c/a\u003e to turn ON the LED.\u003cbr\u003e\");\r\n            client.print(\"Click \u003ca href=\\\"/L\\\"\u003ehere\u003c/a\u003e to turn OFF the LED.\u003cbr\u003e\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos \u003c= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos \u003e= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos \u003e= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password =\u003e unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos \u003c= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password =\u003e Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\n"}},"jsonrpc":"2.0"}Content-Length: 289

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}},"id":1,"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 723

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"'Arduino.h' file not found","range":{"end":{"character":20,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'WiFiServer'","range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"'Keypad.h' file not found","range":{"end":{"character":19,"line":27},"start":{"character":9,"line":27}},"severity":1,"source":"clang"}],"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp","version":1}}Content-Length: 36

{"id":1,"jsonrpc":"2.0","result":[]}Content-Length: 2725

{"id":2,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}
>>>
Content-Length: 190

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 2725

{"id":3,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}
>>>
Content-Length: 289

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":4,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 8169

{"method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp","version":2},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\ECC\\\\Documents\\\\ff\\\\ff.ino\"\n/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include \u003cWiFi.h\u003e\r\n#include \u003cWiFiClient.h\u003e\r\n#include \u003cWiFiAP.h\u003e\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include \u003cKeypad.h\u003e\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include \u003cServo.h\u003e\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click \u003ca href=\\\"/H\\\"\u003ehere\u003c/a\u003e to turn ON the LED.\u003cbr\u003e\");\r\n            client.print(\"Click \u003ca href=\\\"/L\\\"\u003ehere\u003c/a\u003e to turn OFF the LED.\u003cbr\u003e\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos \u003c= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos \u003e= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos \u003e= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password =\u003e unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos \u003c= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password =\u003e Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\n"}]},"jsonrpc":"2.0"}Content-Length: 219

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"},"position":{"line":18,"character":24}},"id":5,"jsonrpc":"2.0"}
<<<
Content-Length: 38

{"id":5,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 190

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"}},"id":6,"jsonrpc":"2.0"}
<<<
Content-Length: 2725

{"id":6,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}
>>>
Content-Length: 218

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"},"position":{"line":20,"character":3}},"id":7,"jsonrpc":"2.0"}
<<<
Content-Length: 296

{"id":7,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `password`  \n\n---\nType: `const char *`  \nValue = `&\"12345678\"[0]`  \n\n---\n```cpp\nconst char *password = \"12345678\"\n```"},"range":{"end":{"character":5,"line":20},"start":{"character":0,"line":20}}}}
>>>
Content-Length: 62

{"method":"$/cancelRequest","params":{"id":4},"jsonrpc":"2.0"}Content-Length: 218

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"},"position":{"line":21,"character":4}},"id":8,"jsonrpc":"2.0"}
<<<
Content-Length: 239

{"id":8,"jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `server`  \n\n---\nType: `int`  \n\n---\n```cpp\npublic: int server\n```"},"range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}}}}
>>>
Content-Length: 469

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"},"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":10}},"context":{"diagnostics":[{"range":{"start":{"line":21,"character":0},"end":{"line":21,"character":10}},"severity":1,"code":"unknown_typename","source":"clang","message":"Unknown type name 'WiFiServer'"}]}},"id":9,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":9,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 219

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"},"position":{"line":27,"character":0}},"id":10,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":10,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 220

{"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server554229403/sketch/ff.ino.cpp"},"position":{"line":21,"character":20}},"id":11,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":11,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 62

{"method":"$/cancelRequest","params":{"id":8},"jsonrpc":"2.0"}Content-Length: 59

{"method":"shutdown","params":null,"id":12,"jsonrpc":"2.0"}
<<<
Content-Length: 39

{"id":12,"jsonrpc":"2.0","result":null}
>>>
Content-Length: 47

{"method":"exit","params":null,"jsonrpc":"2.0"}<<< Read Error: EOF







Started logging.

>>>
Content-Length: 2159

{"method":"initialize","params":{"processId":14760,"rootPath":"C:\\Users\\ECC\\AppData\\Local\\Temp\\arduino-language-server967556263\\sketch","rootUri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch","clientInfo":{"name":"vscode","version":"1.50.0"},"trace":"off","initializationOptions":{},"capabilities":{"workspace":{"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"]},"applyEdit":true,"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"declaration":{"linkSupport":true},"definition":{"linkSupport":true},"implementation":{"linkSupport":true,"dynamicRegistration":true},"typeDefinition":{"linkSupport":true},"synchronization":{"willSave":true,"didSave":true,"willSaveWaitUntil":true},"documentSymbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["markdown","plaintext"],"snippetSupport":true},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"signatureHelp":{"signatureInformation":{"parameterInformation":{"labelOffsetSupport":true}}},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"hover":{"contentFormat":["markdown","plaintext"]},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"colorProvider":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}}},"id":0,"jsonrpc":"2.0"}
<<<
Content-Length: 1671

{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":[],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","enum","enumMember","type","dependent","dependent","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 12.0.0 (https://github.com/llvm/llvm-project e841bd5f335864b8c4d81cbf4df08460ef39f2ae)"}}}
>>>
Content-Length: 52

{"method":"initialized","params":{},"jsonrpc":"2.0"}Content-Length: 8165

{"method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\ECC\\\\Documents\\\\ff\\\\ff.ino\"\n/*\r\n  WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\r\n\r\n  Steps:\r\n  1. Connect to the access point \"yourAp\"\r\n  2. Point your web browser to http://192.168.4.1/H to turn the LED on or http://192.168.4.1/L to turn it off\r\n     OR\r\n     Run raw TCP \"GET /H\" and \"GET /L\" on PuTTY terminal with 192.168.4.1 as IP address and 80 as port\r\n\r\n  Created for arduino-esp32 on 04 July, 2018\r\n  by Elochukwu Ifediora (fedy0)\r\n*/\r\n\r\n#include \u003cWiFi.h\u003e\r\n#include \u003cWiFiClient.h\u003e\r\n#include \u003cWiFiAP.h\u003e\r\n// Set these to your desired credentials.\r\nconst char *ssid = \"Door Lock\";\r\nconst char *password = \"12345678\";\r\nWiFiServer server(80);\r\n\r\n\r\n#define LED_BUILTIN 4  // Ligth Sys. Led\r\n\r\n\r\n#include \u003cKeypad.h\u003e\r\n\r\n#define LED   2  // Door Indecation\r\n#define ROW_NUM     4  // four rows\r\n#define COLUMN_NUM  4  // four columns\r\n\r\n\r\nchar keys[ROW_NUM][COLUMN_NUM] = {\r\n  {'1', '2', '3', 'A'},\r\n  {'4', '5', '6', 'B'},\r\n  {'7', '8', '9', 'C'},\r\n  {'*', '0', '#', 'D'}\r\n};\r\n\r\nbyte pin_rows[ROW_NUM] = {13, 12, 14, 27};    // GIOP19, GIOP18, GIOP5, GIOP17 connect to the row pins\r\nbyte pin_column[COLUMN_NUM] = {26, 25, 33, 32}; // GIOP16, GIOP4, GIOP0, GIOP2 connect to the column pins\r\n\r\nKeypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );\r\n\r\nconst String password_1 = \"123\"; // change your password here\r\nconst String password_2 = \"1234\";  // change your password here\r\nconst String password_3 = \"12345\";  // change your password here\r\nString input_password;\r\n\r\n#include \u003cServo.h\u003e\r\nServo myservo;  // create servo object to control a servo\r\n// twelve servo objects can be created on most boards\r\n\r\nint pos = 0;    // variable to store the servo position\r\nint DoorOpen = 0; //idicatour\r\n\r\nvoid setup() {\r\n \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  Serial.begin(115200);\r\n  Serial.println(\"Hello, Mo3ed!\");\r\n  Serial.println();\r\n  Serial.println(\"Configuring access point...\");\r\n  input_password.reserve(32); // maximum input characters is 32\r\n  pinMode(LED, OUTPUT); \r\n  digitalWrite(LED, LOW ); // lock the door\r\n\r\n  // You can remove the password parameter if you want the AP to be open.\r\n  WiFi.softAP(ssid, password);\r\n  IPAddress myIP = WiFi.softAPIP();\r\n  Serial.print(\"AP IP address: \");\r\n  Serial.println(myIP);\r\n  server.begin();\r\n\r\n  Serial.println(\"Server started\");\r\n\r\n   myservo.attach(18);  // attaches the servo on pin 18 to the servo object\r\n}\r\n\r\nvoid loop() {\r\n  WiFiClient client = server.available();   // listen for incoming clients\r\n\r\n  if (client) {                             // if you get a client,\r\n    Serial.println(\"New Client.\");           // print a message out the serial port\r\n    String currentLine = \"\";                // make a String to hold incoming data from the client\r\n    while (client.connected()) {            // loop while the client's connected\r\n      if (client.available()) {             // if there's bytes to read from the client,\r\n        char c = client.read();             // read a byte, then\r\n        Serial.write(c);                    // print it out the serial monitor\r\n        if (c == '\\n') {                    // if the byte is a newline character\r\n\r\n          // if the current line is blank, you got two newline characters in a row.\r\n          // that's the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // and a content-type so the client knows what's coming, then a blank line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println();\r\n\r\n            // the content of the HTTP response follows the header:\r\n            client.print(\"Click \u003ca href=\\\"/H\\\"\u003ehere\u003c/a\u003e to turn ON the LED.\u003cbr\u003e\");\r\n            client.print(\"Click \u003ca href=\\\"/L\\\"\u003ehere\u003c/a\u003e to turn OFF the LED.\u003cbr\u003e\");\r\n\r\n            // The HTTP response ends with another blank line:\r\n            client.println();\r\n            // break out of the while loop:\r\n            break;\r\n          } else {    // if you got a newline, then clear currentLine:\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\r\n          currentLine += c;      // add it to the end of the currentLine\r\n        }\r\n\r\n        // Check to see if the client request was \"GET /H\" or \"GET /L\":\r\n        if (currentLine.endsWith(\"Led/1\")) {\r\n          digitalWrite(LED_BUILTIN, HIGH);               // GET Led/1 turns the LED on\r\n        }\r\n        if (currentLine.endsWith(\"Led/0\")) {\r\n          digitalWrite(LED_BUILTIN, LOW);                // GET Led/1 turns the LED off\r\n        }\r\n        if (currentLine.endsWith(\"door/1\")) {\r\n          digitalWrite(2, HIGH);                // GET door/1 turns the door LED on\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos \u003c= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        }\r\n        if (currentLine.endsWith(\"door/0\")) {\r\n          if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos \u003e= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n        }\r\n        \r\n \r\n      }\r\n    }\r\n    // close the connection:\r\n    client.stop();\r\n    Serial.println(\"Client Disconnected.\");\r\n  }\r\n  // keypad\r\n\r\n  char key = keypad.getKey();\r\n\r\n  if (key) {\r\n    Serial.println(key);\r\n\r\n    if (key == 'D') {\r\n      if(DoorOpen == 1){\r\n      digitalWrite(LED, LOW );\r\n       for (pos = 90; pos \u003e= 0; pos -= 1) { // goes from 180 degrees to 0 degrees\r\n    myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n    delay(10);                       // waits 15ms for the servo to reach the position\r\n  }\r\n      Serial.println(\"DOOR LOOKED\");\r\n      DoorOpen = 0;}\r\n    }\r\n    else if (key == '*') {\r\n      input_password = \"\"; // reset the input password\r\n      Serial.println(\"reset the input password\");\r\n    } else if (key == '#') {\r\n      if (input_password == password_1 || input_password == password_2 || input_password == password_3) {\r\n        digitalWrite(2, HIGH);  \r\n        Serial.println(\"Valid Password =\u003e unlock the door\");\r\n        if(DoorOpen == 0){\r\n        for (pos = 0; pos \u003c= 90; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree\r\n             myservo.write(pos);              // tell servo to go to position in variable 'pos'\r\n             delay(10);                   }\r\n             \r\n             DoorOpen = 1;\r\n        }\r\n        \r\n      } else {\r\n        Serial.println(\"Invalid Password =\u003e Try again\");\r\n      }\r\n\r\n      input_password = \"\"; // reset the input password\r\n    } else {\r\n      input_password += key; // append new character to input password string\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n\n"}},"jsonrpc":"2.0"}Content-Length: 190

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp"}},"id":1,"jsonrpc":"2.0"}Content-Length: 289

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}},"id":2,"jsonrpc":"2.0"}
<<<
Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"id":0,"result":null,"jsonrpc":"2.0"}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 723

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"'Arduino.h' file not found","range":{"end":{"character":20,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'WiFiServer'","range":{"end":{"character":10,"line":21},"start":{"character":0,"line":21}},"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"'Keypad.h' file not found","range":{"end":{"character":19,"line":27},"start":{"character":9,"line":27}},"severity":1,"source":"clang"}],"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp","version":1}}Content-Length: 2725

{"id":1,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}Content-Length: 36

{"id":2,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 289

{"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}},"id":3,"jsonrpc":"2.0"}
<<<
Content-Length: 36

{"id":3,"jsonrpc":"2.0","result":[]}
>>>
Content-Length: 190

{"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///C:/Users/ECC/AppData/Local/Temp/arduino-language-server967556263/sketch/ff.ino.cpp"}},"id":4,"jsonrpc":"2.0"}
<<<
Content-Length: 2725

{"id":4,"jsonrpc":"2.0","result":[{"kind":13,"name":"ssid","range":{"end":{"character":30,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":12,"line":19}}},{"kind":13,"name":"password","range":{"end":{"character":33,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":20,"line":20},"start":{"character":12,"line":20}}},{"kind":13,"name":"server","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":17,"line":21},"start":{"character":11,"line":21}}},{"kind":13,"name":"keys","range":{"end":{"character":1,"line":39},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":9,"line":34},"start":{"character":5,"line":34}}},{"kind":13,"name":"keypad","range":{"end":{"character":13,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":13,"line":44},"start":{"character":7,"line":44}}},{"kind":13,"name":"password_1","range":{"end":{"character":23,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":13,"line":46}}},{"kind":13,"name":"password_2","range":{"end":{"character":23,"line":47},"start":{"character":0,"line":47}},"selectionRange":{"end":{"character":23,"line":47},"start":{"character":13,"line":47}}},{"kind":13,"name":"password_3","range":{"end":{"character":23,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":23,"line":48},"start":{"character":13,"line":48}}},{"kind":13,"name":"input_password","range":{"end":{"character":21,"line":49},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":21,"line":49},"start":{"character":7,"line":49}}},{"kind":13,"name":"myservo","range":{"end":{"character":13,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":13,"line":52},"start":{"character":6,"line":52}}},{"kind":13,"name":"pos","range":{"end":{"character":11,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":7,"line":55},"start":{"character":4,"line":55}}},{"kind":13,"name":"DoorOpen","range":{"end":{"character":16,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":12,"line":56},"start":{"character":4,"line":56}}},{"kind":12,"name":"setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":10,"line":58},"start":{"character":5,"line":58}}},{"kind":12,"name":"loop","range":{"end":{"character":1,"line":195},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":9,"line":81},"start":{"character":5,"line":81}}}]}